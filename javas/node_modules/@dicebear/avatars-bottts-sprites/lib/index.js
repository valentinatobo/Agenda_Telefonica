"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const color_1 = __importDefault(require("@dicebear/avatars/lib/color"));
const eyes_1 = __importDefault(require("./eyes"));
const face_1 = __importDefault(require("./face"));
const mouth_1 = __importDefault(require("./mouth"));
const sides_1 = __importDefault(require("./sides"));
const texture_1 = __importDefault(require("./texture"));
const top_1 = __importDefault(require("./top"));
const group = (random, content, chance, x, y) => {
    if (random.bool(chance)) {
        return `<g transform="translate(${x}, ${y})">${content}</g>`;
    }
    return '';
};
function default_1(random, options = {}) {
    options = Object.assign({ primaryColorLevel: 600, secondaryColorLevel: 400, mouthChance: 100, sidesChance: 100, textureChance: 50, topChance: 100 }, options);
    let colorsCollection = [];
    Object.keys(color_1.default.collection).forEach((color) => {
        if (options.colors === undefined || options.colors.length === 0 || options.colors.indexOf(color) !== -1) {
            colorsCollection.push(color_1.default.collection[color]);
        }
    });
    let primaryColorCollection = random.pickone(colorsCollection);
    let secondaryColorCollection = random.pickone(colorsCollection);
    let primaryColor = new color_1.default(primaryColorCollection[options.primaryColorLevel]);
    let secondaryColor = new color_1.default(primaryColorCollection[options.secondaryColorLevel]);
    if (options.colorful) {
        secondaryColor = new color_1.default(secondaryColorCollection[options.secondaryColorLevel]);
    }
    let eyes = random.pickone(eyes_1.default);
    let face = random.pickone(face_1.default);
    let mouth = random.pickone(mouth_1.default);
    let sides = random.pickone(sides_1.default);
    let texture = random.pickone(texture_1.default);
    let top = random.pickone(top_1.default);
    // prettier-ignore
    return [
        '<svg viewBox="0 0 180 180" xmlns="http://www.w3.org/2000/svg" fill="none">',
        group(random, sides(secondaryColor), options.sidesChance, 0, 66),
        group(random, top(secondaryColor), options.topChance, 41, 0),
        group(random, face(primaryColor, random.bool(options.textureChance) ? texture() : undefined), 100, 25, 44),
        group(random, mouth(), options.mouthChance, 52, 124),
        group(random, eyes(), 100, 38, 76),
        '</svg>'
    ].join('');
}
exports.default = default_1;
//# sourceMappingURL=index.js.map